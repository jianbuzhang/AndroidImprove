<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HandHeldProducts.Embedded.Decoding.DecodeComponent</name>
    </assembly>
    <members>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeException">
            <summary>
            The DecodeException class exposed decode specific exceptions.  
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeException.ResultCode">
            <summary>
            Returns the embedded Result code contained within the exception.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.IOCTLDefs.GetDeviceInfo(HandHeldProducts.Embedded.Utility.IOCTLDefs.HalStrings,System.Int32)">
            <summary>
            Get numeric information from device using the specified code parameter.
            </summary>
            <param name="code">
            One of the "HAL_GET_xxx" constants.
            </param>
            <param name="a">
            A reserved value; set to 0.
            </param>
            <returns>
            An integer value that contains the requested information.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.IOCTLDefs.GetDeviceInfo(HandHeldProducts.Embedded.Utility.IOCTLDefs.HalStrings)">
            <summary>
            Get text information from device using the specified code parameter.
            </summary>
            <param name="code">
            One of the "HAL_GET_xxx" constants.
            </param>
            <returns>
            An string that contains the requested information.
            </returns>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.ExmDecodeSection">
            <summary>
            The section(s) of the Decode EXM file to be applied.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.ExmDecodeSection.Both">
            <summary>
            Apply both the Property and Symbology sections.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.ExmDecodeSection.Property">
            <summary>
            Apply the Property section.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.ExmDecodeSection.Symbology">
            <summary>
            Apply the Symbology section.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Hardware.Device">
            <summary>
            The Device class exposes the hardware of the device. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Device.Imager">
            <summary>
            Public interface to the Imager class.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Hardware.Device.AimerOn(System.Boolean)">
            <summary>
            Enable or disable the aimer.
            </summary>
            <param name="State">Specifies the desired aimer state to be set.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Hardware.Device.IlluminationOn(System.Boolean)">
            <summary>
            Enable or disable illumination.
            </summary>
            <param name="State">Specifies the desired illumination state to be set.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Hardware.Device.VibratorOn(System.Boolean)">
            <summary>
            Enable or disable the vibrator.
            </summary>
            <param name="State">Specifies to vibrate or not</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Hardware.Device.SetLEDs(HandHeldProducts.Embedded.Hardware.Device.LedSelect,HandHeldProducts.Embedded.Hardware.Device.LedState,System.Int32,System.Int32)">
            <summary>
            Sets the state of the specified LED.
            </summary>
            <param name="nLed">The LED being addressed.
            </param>
            <param name="state">
            The state to be applied to the specified LED.</param>
            <param name="BlinkRateOnTime">
            On time of the blink cycle, in microseconds. 
            </param>
            <param name="BlinkRateOffTime">
            Off time of the blink cycle, in microseconds. 
            </param>
            <returns>
            The status of the result. True = successful.
            </returns>
        </member>
        <member name="T:HandHeldProducts.Embedded.Hardware.Device.LedState">
            <summary>
            State of the LED.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Device.LedState.Off">
            <summary>
            LED off state.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Device.LedState.On">
            <summary>
            LED on state.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Device.LedState.Blink">
            <summary>
            LED blink state.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Hardware.Device.LedSelect">
            <summary>
            Enumeration of the available states of the LED's.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Device.LedSelect.RightRed">
            <summary>
            Right right LED.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Device.LedSelect.RightGreen">
            <summary>
            Right green LED.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Device.LedSelect.LeftRed">
            <summary>
            Left red LED.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Device.LedSelect.LeftGreen">
            <summary>
            Left green LED.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Device.LedSelect.RightOrange">
            <summary>
            Right orange LED.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Device.LedSelect.LeftOrange">
            <summary>
            Left orange LED.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.UtilMethods">
            <summary>
            The UtilMethods class is used to to obtain specific information about the kernel or device.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetSerialNumber">
            <summary>
            Get Terminal Serial Number from device.
            </summary>
            <returns>
            A string containing the device Serial Number.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetKernelVersion">
            <summary>
            Get Kernel Version number from device.
            </summary>
            <returns>
            A string containing the Kernel Version.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetKernelDate">
            <summary>
            Get Kernel Date from device.
            </summary>
            <returns>
            A string containing the Kernel Date.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetKernelTime">
            <summary>
            Get Kernel Time from device.
            </summary>
            <returns>
            A string containing the Kernel Time.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetBootLoaderVersion">
            <summary>
            Get Boot Loader Version number from device.
            </summary>
            <returns>
            A string containing the Boot Loader Version.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetBootLoaderDate">
            <summary>
            Get Boot Loader Date from device.
            </summary>
            <returns>
            A string containing the Boot Loader Date.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetBootLoaderTime">
            <summary>
            Get Boot Loader Time from device.
            </summary>
            <returns>
            A string containing the Boot Loader Time.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetKeyboardVersion">
            <summary>
            Get Keyboard Version number from device.
            </summary>
            <returns> 
            A string containing the Keyboard Version.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetKeyboardType">
            <summary>
            Get Keyboard type from device.
            </summary>
            <returns>
            A value containing the Keyboard type.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetScannerType">
            <summary>
            Get Scanner Type from device.
            </summary>
            <returns>
            Refer to the ScannerType enumeration.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetHardwareRev">
            <summary>
            Get Hardware Revision number from device.
            </summary>
            <returns>
            A string containing the HardwareRev number.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetManufacturingDate">
            <summary>
            Get Manufacturing Date from device.
            </summary>
            <returns>
            A string containing the Manufacturing Date.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetPartNumber">
            <summary>
            Get Manufacturing Part Number from device.
            </summary>
            <returns>
            A string containing the Manufacturing Part Number.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.IsTouchPanel">
            <summary>
            Get Touch Panel Type from device.
            </summary>
            <returns>
            True if device has a touch panel otherwise false.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetConfigurationNumber">
            <summary>
            Get the Configuration Number from device.
            </summary>
            <returns>
            A string containing the Configuration Number.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetModelNumber">
            <summary>
            Get Manufacturing Model Number from device.
            </summary>
            <returns>
            A string containing the Manufacturing Model Number.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetCPLDVersion">
            <summary>
            Get Manufacturing CPLD Version from device.
            </summary>
            <returns>
            A value containing the Manufacturing CPLD Version.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.GetWindowHandle(System.String,System.String)">
            <summary>
            Search for and retrieve handle of window matching parameters.
            </summary>
            <param name="CLASSNAME">
            Class of window: this will normally be WinAPI.NET_CLASSNAME.
            </param>
            <param name="CONTROL_TITLE">
            Title of window: normally the Text of the window object.
            </param>
            <returns>
            Window handle matching parameters.
            </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.IsAlreadyRunning(System.String)">
            <summary>
            Check to see if Application with specified name is already running.
            </summary>
            <param name="windowName">
            Title of window: normally the Text field of the window object.
            This call needs to be made before the application starts running.
            Use caution with this parameter because typically the class associated
            with the form has not yet been created when this call needs to be made!
            </param>
            <returns>
            The running status of the specified application.
            </returns>
            <example>An example using IsAlreadyRunning()
            <code>
            if (WinAPI.IsAlreadyRunning("Name_of_Application"))
            	Application.Exit();
            else
            	Application.Run(new formName());
            </code>
            </example>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.EnableSerialPower(System.Boolean)">
            <summary>
            Enable/Disable 5V serial power.
            </summary>
            <param name="enable">
            Specifies whether to enable or disable the serial power.
            </param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.WarmReset">
            <summary>
            Perform a Warm Reset on the device.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.ColdReboot">
            <summary>
            Perform a Cold Reboot on the device.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.FactoryReset">
            <summary>
            Perform a Factory Reset on the device.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.UtilMethods.SuspendDevice">
            <summary>
            Set device in suspended state.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType">
            <summary>
            Enumeration of PDT scanner types.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.Unknown">
            <summary>
            Unknown Scanner Type.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.None">
            <summary>
            No scanner available.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.It4200">
            <summary>
            Honeywell IT4200 imager
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.Se1200">
            <summary>
            Symbol SE1200 non-decoded laser
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.Se1223">
            <summary>
            Symbol SE1223 decoded laser
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.RfId">
            <summary>
            Wayfarer RF ID reader
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.It4000">
            <summary>
            Honeywell IT4000 imager
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.It4100">
            <summary>
            Honeywell IT4100 imager
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.It4300">
            <summary>
            Honeywell IT4300 imager
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.It5100">
            <summary>
            Honeywell IT5000 imager
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.It5300">
            <summary>
            Honeywell IT5300 imager
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.N5603">
            <summary>
            Honeywell N5603 imager
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.ScannerType.N5600">
            <summary>
            Honeywell N5600 imager
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType">
            <summary>
            Keyboard layout types.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key43">
            <summary>
            43 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key56">
            <summary>
            56 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key35">
            <summary>
            35 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key25">
            <summary>
            25 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key56CALC">
            <summary>
            56 ALC keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key36">
            <summary>
            36 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key29">
            <summary>
            29 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key38">
            <summary>
            38 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key45">
            <summary>
            45 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key31">
            <summary>
            31 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key55">
            <summary>
            55 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key34">
            <summary>
            34 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.Key43a">
            <summary>
            43 keypad layout.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.UtilMethods.KeyboardType.KeyUPS">
            <summary>
            UPS keypad layout.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeComponent">
            <summary>
            Provides design time support for the Decode SDK.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.#ctor">
            <summary>
            DecodeComponent constructor.
            </summary>        
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.#ctor(System.ComponentModel.IContainer)">
            <summary>
            DecodeComponent constructor.
            </summary>
            <param name="Container">Container object for the DecodeComponent.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.Finalize">
            <summary>
            DecodeComponent destructor.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.Dispose(System.Boolean)">
            <summary>
            Explicitly free, release or reset unmanaged resources.
            </summary>
            <param name="Disposing">Explicitly called from managed code?</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.OnDecodeEvent(HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs)">
            <summary>
            Raises the Decode Event to the registered event handler.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.OnMultiDecodeEvent(HandHeldProducts.Embedded.Decoding.DecodeAssembly.MultiDecodeEventArgs)">
            <summary>
            Raises the MultiDecodeEvent to the registered event handler.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.Connect">
            <summary>
            Connect to the Decoder engine
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.Disconnect">
            <summary>
            Disconnect from the Decoder engine
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.ConfigureFromExm(System.String)">
            <summary>
            Configure the decode settings from an EXM file.
            </summary>
            <param name="ExmFile">The full path and name of the EXM configuration file.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.EnableSymbology(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies,System.Boolean)">
            <summary>
            Enable or disable a specified symbology.
            </summary>
            <param name="Symbology">The symbology to be enabled / disabled.</param>
            <param name="State">The enabled state.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.Play(HandHeldProducts.Embedded.Hardware.Sound.SoundTypes)">
            <summary>
            Play an audible sound (automatic speaker or beeper detection).
            </summary>
            <param name="Type">Type of sound to play (success or failure).</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.SetOcr(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRFonts,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the current OCR decoding configuration.
            </summary>
            <param name="OcrFont">Determines which OCR fonts are used for decoding.</param>
            <param name="Pattern">A string that represents one or more patterns
            for the OCR decode. The following characters are allowed:
            A-Z: capital letters are matched as is.
            d: a digit from 0 to 9.
            a: alphanumeric character.
            l: alphabetic letter.
            g: any character specified in groupG.
            h: any character specified in groupH.</param>
            <param name="GroupG">A string that represents a list of characters that
            can be substituted for the lower case 'g' in the template strings.</param>
            <param name="GroupH">A string that represents a list of characters that
            can be substituted for the lower case 'h' in the template strings.</param>
            <param name="CheckChar">A null-terminated string that represents a check
            character position in the template strings.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.SetOcrTemplates(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRTemplates)">
            <summary>
            Set OCR Templates
            </summary>
            <param name="OcrTemplates">One of OCRTemplates</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.SetOcrUserTemplate(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCREnableModes,System.Byte[])">
            <summary>
            Set OCR User Template
            </summary>
            <param name="OcrMode">One of OCREnableModes</param>
            <param name="Template">Byte array (see OPH manual.pdf</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeComponent.GetOcr(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRFonts@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Gets the current OCR decoding configuration.
            </summary>
            <param name="OcrFont">Determines which OCR fonts are used for decoding.</param>
            <param name="Pattern">A string that represents one or more patterns
            for the OCR decode. The following characters are allowed:
            A-Z: capital letters are matched as is.
            d: a digit from 0 to 9.
            a: alphanumeric character.
            l: alphabetic letter.
            g: any character specified in groupG.
            h: any character specified in groupH.</param>
            <param name="GroupG">A string that represents a list of characters that
            can be substituted for the lower case 'g' in the template strings.</param>
            <param name="GroupH">A string that represents a list of characters that
            can be substituted for the lower case 'h' in the template strings.</param>
            <param name="CheckChar">A null-terminated string that represents a check
            character position in the template strings.</param>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.AimerDelay">
            <summary>
            The amount of time (ms) to enable the aimer before scanning.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.ContinuousScan">
            <summary>
            Perform successive scan operations?
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.DecodeMode">
            <summary>
            The decode operation modes.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.DisplayControl">
            <summary>
            The UI control to display the decode result.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.LEDsOnDecode">
            <summary>
            Automatically illuminate the LEDs during a scan operation?  The right LED will be red while scanning.  The left LED will be green following a successful scan.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.LinearRange">
            <summary>
            The linear range when ALD mode is enabled.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.PrintWeight">
            <summary>
            Identifies the quality of the printed barcode (1 - Light, 7 - Dark).
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.ScanKey">
            <summary>
            The key used to invoke a scan operation.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.ScanningLightsMode">
            <summary>
            The aimer and illumination lights mode for scanning.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.ScanTimeout">
            <summary>
            The maximum time (ms) allowed for a decode attempt during a single operation.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.SoundOnDecode">
            <summary>
            Automatically play a sound to acknowledge a completed scan operation?
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.MultipleScanTimeout">
            <summary>
            The Time (ms) allowed for a decode attempt during a single operation.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeComponent.ScanKeyOperation">
            <summary>
            Configures the operation associated with the ScanKey.
            </summary>
        </member>
        <member name="E:HandHeldProducts.Embedded.Decoding.DecodeComponent.DecodeEvent">
            <summary>
            Signals a completed decode operation.
            </summary>
        </member>
        <member name="E:HandHeldProducts.Embedded.Decoding.DecodeComponent.MultiDecodeEvent">
            <summary>
            Signals a completed ScanMultipleBarcodes operation.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeComponent.ScanKeys">
            <summary>
            The keys that can be used for initiating a scan operation.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeComponent.ScanKeys.Enter">
            <summary>
            The "Enter" key.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeComponent.ScanKeys.Scan">
            <summary>
            The "Scan" key.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeComponent.ScanKeyOptions">
            <summary>
            The operations that the ScanKey can perform.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeComponent.ScanKeyOptions.ScanBarcode">
            <summary>
            Configures the ScanKey to perform the ScanBarcode operation.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeComponent.ScanKeyOptions.ScanMultipleBarcodes">
            <summary>
            Configures the ScanKey to perform the ScanMultipleBarcode operation.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeComponent.DecodeEventHandler">
            <summary>
            Delegate for the Decode Event that will pass the DecodeEventArgs.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeComponent.MultipleDecodeEventHandler">
            <summary>
            Delegate for the MultiDecodeEvent that will pass the MultiDecodeEventArgs.
            </summary>
            <param name="sender">The Source of the event.</param>
            <param name="e">The Event Data.</param>
        </member>
        <member name="T:HandHeldProducts.Embedded.Hardware.Sound">
            <summary>
            The Sound class exposes the ability to invoke audible sounds on the device.  
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Hardware.Sound.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Hardware.Sound.Play(HandHeldProducts.Embedded.Hardware.Sound.SoundTypes)">
            <summary>
            Plays a sound (automatic speaker or beeper detection).
            </summary>
            <param name="Type">Sound type to be played.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Hardware.Sound.Play(System.String)">
            <summary>
            Plays a sound file from an external file.
            </summary>
            <param name="SoundFile">The path of the sound file.</param>
        </member>
        <member name="T:HandHeldProducts.Embedded.Hardware.Sound.SoundTypes">
            <summary>
            Embbeded sound bytes
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Sound.SoundTypes.Failure">
            <summary>
            Sound associated with failure.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Sound.SoundTypes.Success">
            <summary>
            Sound associated with success.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator">
            <summary>
            The SymbologyConfigurator exposes the interface to configure the device engine for decoding specific symbologies.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.#ctor(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies)">
            <summary>
            Default constructor
            </summary>
            <param name="Symbology">Symbology / Symbologies to set.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Dispose">
            <summary>
            Releases all SymbologyConfigurator resources.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.GetMinMaxLengthLimits(System.Int32@,System.Int32@)">
            <summary>
            Get the Symbology's Min and Max Length
            </summary>
            <param name="Min">Returns the minimum length.</param>
            <param name="Max">Returns the maximum length.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.ReadConfig(HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetupTypes)">
            <summary>
            Reads the symbology's configuration.
            </summary>
            <param name="SetupType">Sets the specific setup to either default or current values.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SetToDefaults">
            <summary>
            Sets the symbology's configuration to the default values.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.WriteConfig">
            <summary>
            Writes the symbology's configuration.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Flags">
            <summary>
            Get/Set The Flags that Represent the Symbology Configuration Options.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Mask">
            <summary>
            Get/Set The Mask That Identifies Whether Flags and / or Range Should be Read / Written.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.MaxLength">
            <summary>
            Get/Set The Maximum Symbology Length.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.MinLength">
            <summary>
            Get/Set The Minimum Symbology Length.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbology">
            <summary>
            Returns The Symbology to Configure.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyConfigurationType">
            <summary>
            Returns the Symbology Configuration Type.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID">
            <summary>
            AIM Symbology Identifiers
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.AusPost">
            <summary>
            AIM Identifier for Australian Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Aztec">
            <summary>
            AIM Identifier for Aztec
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.BPO">
            <summary>
            AIM Identifier for British Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.CanPost">
            <summary>
            AIM Identifier for Canadian Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.ChinaPost">
            <summary>
            AIM Identifier for China Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.CodaBar">
            <summary>
            AIM Identifier for CodaBar
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.CodaBlock">
            <summary>
            AIM Identifier for CodaBlock
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Code11">
            <summary>
            AIM Identifier for Code11
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Code128">
            <summary>
            AIM Identifier for Code128
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Code16K">
            <summary>
            AIM Identifier for Code16K
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Code32">
            <summary>
            AIM Identifier for Code32
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Code39">
            <summary>
            AIM Identifier for Code39
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Code49">
            <summary>
            AIM Identifier for Code49
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Code93">
            <summary>
            AIM Identifier for
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Composite">
            <summary>
            AIM Identifier for Composite
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.CouponCode">
            <summary>
            AIM Identifier for CouponCode
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.DataMatrix">
            <summary>
            AIM Identifier for DataMatrix
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.DutchPost">
            <summary>
            AIM Identifier for Dutch Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.GS1_128">
            <summary>
            AIM Identifier for GS1_128
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.EAN">
            <summary>
            AIM Identifier for Ean
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.GRIDMATRIX">
            <summary>
            AIM Identifier for GridMatrix
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.HANXIN">
            <summary>
            AIM Identifier for HanXin
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.IATA25">
            <summary>
            AIM Identifier for IATA25
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Int25">
            <summary>
            AIM Identifier for Interleaved 2/5
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.ISBT">
            <summary>
            AIM Identifier for ISBT
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.JaPost">
            <summary>
            AIM Identifier for Japan Postal
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.KoreaPost">
            <summary>
            AIM Identifier for Korean Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.LabelCode">
            <summary>
            AIM Identifier for LabelCode
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Matrix25">
            <summary>
            AIM Identifier for Matrix 2/5
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.MaxiCode">
            <summary>
            AIM Identifier for MaxiCode
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.MicroPDF">
            <summary>
            AIM Identifier for MicroPDF
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.MSI">
            <summary>
            AIM Identifier for MSI
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.OCR">
            <summary>
            AIM Identifier for OCR
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.PDF417">
            <summary>
            AIM Identifier for PDF417
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Planet">
            <summary>
            AIM Identifier for Planet Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Plessey">
            <summary>
            AIM Identifier for Plessey
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.PosiCode">
            <summary>
            AIM Identifier for PosiCode
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.PostNet">
            <summary>
            AIM Identifier for PostNet
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.QR">
            <summary>
            AIM Identifier for QR Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.RSS">
            <summary>
            AIM Identifier for Reduced Space Symbology
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Strt25">
            <summary>
            AIM Identifier for Straight 2/5
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.TelePen">
            <summary>
            AIM Identifier for TelePen
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.TLC39">
            <summary>
            AIM Identifier for TCIF Linked Code 39
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.Trioptic">
            <summary>
            AIM Identifier for Trioptic
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.UPC">
            <summary>
            AIM Identifier for UPC-A
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.AimID.USPS4CB">
            <summary>
            AIM Identifier for USPS 4 State Customer Barcode
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.BitMasks">
            <summary>
            Symbology Configuration Mask Type
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.BitMasks.All">
            <summary>
            Mask All.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.BitMasks.Flags">
            <summary>
            Mask the Flags.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.BitMasks.MaxLength">
            <summary>
            Mask the maximum length.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.BitMasks.MinLength">
            <summary>
            Mask the minimum length.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID">
            <summary>
            Honeywell Product Code Identifiers
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.AusPost">
            <summary>
            Honeywell Identifier for Australian Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Aztec">
            <summary>
            Honeywell Identifier for Aztec
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.BPO">
            <summary>
            Honeywell Identifier for Brotish Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.CanPost">
            <summary>
            Honeywell Identifier for Canadian Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.ChinaPost">
            <summary>
            Honeywell Identifier for China Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.CodaBar">
            <summary>
            Honeywell Identifier for Codabar
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.CodaBlock">
            <summary>
            Honeywell Identifier for CodaBlock
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Code11">
            <summary>
            Honeywell Identifier for Code11
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Code128">
            <summary>
            Honeywell Identifier for Code128
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Code16K">
            <summary>
            Honeywell Identifier for Code16K
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Code32">
            <summary>
            Honeywell Identifier for Code32
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Code39">
            <summary>
            Honeywell Identifier for Code39
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Code49">
            <summary>
            Honeywell Identifier for Code49
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Code93">
            <summary>
            Honeywell Identifier for Code93
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Composite">
            <summary>
            Honeywell Identifier for Composite
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.CouponCode">
            <summary>
            Honeywell Identifier for CouponCode
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.DataMatrix">
            <summary>
            Honeywell Identifier for DataMatrix
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.DutchPost">
            <summary>
            Honeywell Identifier for Dutch Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.EAN8">
            <summary>
            Honeywell Identifier for EAN 8
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.EAN">
            <summary>
            Honeywell Identifier for EAN 13
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.GS1_128">
            <summary>
            Honeywell Identifier for GS1_128
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.GRIDMATRIX">
            <summary>
            Honeywell Identifier for GridMatrix
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.HANXIN">
            <summary>
            Honeywell Identifier for HanXin
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.IATA25">
            <summary>
            Honeywell Identifier for IATA2/5
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Int25">
            <summary>
            Honeywell Identifier for Interleaved 2/5
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.ISBT">
            <summary>
            Honeywell Identifier for ISBT
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.JaPost">
            <summary>
            Honeywell Identifier for Japan Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.KoreaPost">
            <summary>
            Honeywell Identifier for Korean Postal Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.LabelCode4">
            <summary>
            Honeywell Identifier for LabelCode4
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.LabelCode5">
            <summary>
            Honeywell Identifier for LabelCode5
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Matrix25">
            <summary>
            Honeywell Identifier for Matrix 2/5
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.MaxiCode">
            <summary>
            Honeywell Identifier for MaxiCode
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.MicroPDF">
            <summary>
            Honeywell Identifier for MicroPDF
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.MSI">
            <summary>
            Honeywell Identifier for MSI
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.OCR">
            <summary>
            Honeywell Identifier for OCR
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.PDF417">
            <summary>
            Honeywell Identifier for PDF417
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Planet">
            <summary>
            Honeywell Identifier for Planet Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Plessey">
            <summary>
            Honeywell Identifier for Plessey
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.PosiCode">
            <summary>
            Honeywell Identifier for PosiCode
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.PostNet">
            <summary>
            Honeywell Identifier for PostNet
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.QR">
            <summary>
            Honeywell Identifier for QR Code
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.RSS">
            <summary>
            Honeywell Identifier for RSS
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Strt25">
            <summary>
            Honeywell Identifier for Straight 2/5
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.TelePen">
            <summary>
            Honeywell Identifier for TelePen
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.TLC39">
            <summary>
            Honeywell Identifier for TCIF Linked 39
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.Trioptic">
            <summary>
            Honeywell Identifier for Trioptic
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.UPC">
            <summary>
            Honeywell Identifier for UPC-A
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.UPCE">
            <summary>
            Honeywell Identifier for UPC-E
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.CodeID.USPS4CB">
            <summary>
            Honeywell Identifier for USPS 4 State Customer Barcode
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.ConfigurationTypes">
            <summary>
            The Symbology Configuration Type Options 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.ConfigurationTypes.Flags">
            <summary>
            Flags only.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.ConfigurationTypes.FlagsRange">
            <summary>
            Flags and Range.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRFonts">
            <summary>
            OCR Font Types
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRFonts.None">
            <summary>
            Disable OCR fonts.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRFonts.A">
            <summary>
            Enable OCR A.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRFonts.B">
            <summary>
            Enable OCR B.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRFonts.Both">
            <summary>
            Enable Both A and B OCR.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRFonts.MicrUnsupported">
            <summary>
            OCR Micr is unsupported.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRTemplates">
            <summary>
            OCR Template Types for decSetOCRTemplates
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRTemplates.UserTemplate">
            <summary>
            User defined template. Enabled by default
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRTemplates.PassportTemplate">
            <summary>
            Internal passport template
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRTemplates.ISBNTemplate">
            <summary>
            Internal ISBN template
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRTemplates.PriceFieldTemplate">
            <summary>
            Internal price field template
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRTemplates.MicrE13BTemplate">
            <summary>
            Internal MicrE-13 B template
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCREnableModes">
            <summary>
            OCR Enable Modes for decSetOCRUserTemplate
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCREnableModes.Off">
            <summary>
            OCR is disabled
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCREnableModes.NormalVideo">
            <summary>
            OCR to normal video mode
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCREnableModes.InverseVideo">
            <summary>
            OCR to inverse video mode
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCREnableModes.Both">
            <summary>
            OCR to both video modes
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies">
            <summary>
            Symbology Identifiers for Configuration
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Aztec">
            <summary>
            Aztec Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.CodaBar">
            <summary>
            CodaBar Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Code11">
            <summary>
            Code 11 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Code128">
            <summary>
            Code 128 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Code39">
            <summary>
            Code 39 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Code49">
            <summary>
            Code 49 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Code93">
            <summary>
            Code 93 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Composite">
            <summary>
            EAN.UCC (Composite) Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.DataMatrix">
            <summary>
            Data Matrix Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.EAN8">
            <summary>
            EAN-8 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.EAN13">
            <summary>
            EAN-13 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Int25">
            <summary>
            Interleaved 2 of 5 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.MaxiCode">
            <summary>
            MaxiCode Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.MicroPDF">
            <summary>
            MicroPDF Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.OCR">
            <summary>
            Optical Character Recognition (OCR) Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.PDF417">
            <summary>
            PDF417 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.PostNet">
            <summary>
            PostNet Symbology
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.QR">
            <summary>
            QR Code / Micro QR Code Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.RSS">
            <summary>
            EAN.UCC (RSS) Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.UPCA">
            <summary>
            UPC-A Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.UPCE0">
            <summary>
            UPC-E Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.UPCE1">
            <summary>
            UPC-E1 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.ISBT">
            <summary>
            ISBT 128 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.BPO">
            <summary>
            British Post Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.CanPost">
            <summary>
            Canadian Post Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.AusPost">
            <summary>
            Australian Post Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.IATA25">
            <summary>
            Straight 2 of 5 (IATA) Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.CodaBlock">
            <summary>
            CodaBlock F Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.JaPost">
            <summary>
            Japanese Postal Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Planet">
            <summary>
            Planet Code Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.DutchPost">
            <summary>
            KIX (Netherlands) Postal Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.MSI">
            <summary>
            MSI Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.TLC39">
            <summary>
            TCIF Linked Code 39 (TLC39) Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Trioptic">
            <summary>
            Trioptic Code Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Code32">
            <summary>
            Code 32 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Strt25">
            <summary>
            Straight 2 of 5 (Industrial) Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Matrix25">
            <summary>
            Matrix 2 of 5 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Plessey">
            <summary>
            Plessey Code Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.ChinaPost">
            <summary>
            China Postal Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.KoreaPost">
            <summary>
            Korea Postal Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.TelePen">
            <summary>
            TelePen Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Code16K">
            <summary>
            Code1 16K Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.PosiCode">
            <summary>
            PosiCode Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.CouponCode">
            <summary>
            UPC-A (Coupon Code) Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Usps4Cb">
            <summary>
            4-CB (4-State Customer Barcode) Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.IDTag">
            <summary>
            ID-Tag (UPU 4-State)Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.LabelCode">
            <summary>
            Label Code 4 and 5 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.GS1_128">
            <summary>
            GS1_128 Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.HanXin">
            <summary>
            HanXin Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.GridMatrix">
            <summary>
            Grid Matrix Symbology.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.Postals">
            <summary>
            Used to default and disable postal codes
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.USPostals_1">
            <summary>
            Used to enable Planet, PostNet, USPS4CB and IDTag
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies.All">
            <summary>
            All Available Symbologies.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags">
            <summary>
            Symbology Bit Mask Options
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.Addenda2Digit">
            <summary>
            2 Digit Supplimental/Addenda.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.Addenda5Digit">
            <summary>
            5 Digit Supplimental/Addenda.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.AddendaRequired">
            <summary>
            Supplimental/Addenda Is Required.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.AddendaSeparator">
            <summary>
            Supplimental/Addenda Separator.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.AustralianBarWidth">
            <summary>
            Australian Bar Width.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.AztecRunEnable">
            <summary>
            Enable Aztec Run.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.CheckEnable">
            <summary>
            Enable Check Digit.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.CheckTransmit">
            <summary>
            Enable Transmit Character.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.CodaBarConcatenate">
            <summary>
            CodaBar Concatenate.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.CompositeUpc">
            <summary>
            Composite UPC.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.Enable">
            <summary>
            Enable.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.EnableAppendMode">
            <summary>
            Enable Append Mode.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.EnableFullAscii">
            <summary>
            Enable Full Ascii.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.ExpandedUpcE">
            <summary>
            Expanded UPC-E
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.NumSysTransmit">
            <summary>
            Transmit Number System.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.PosiCodeLimited1">
            <summary>
            PosiCode Limited 1.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.PosiCodeLimited2">
            <summary>
            PosiCode Limited 2.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.RseEnable">
            <summary>
            Enable RSE.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.RslEnable">
            <summary>
            Enable RSL.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.RssEnable">
            <summary>
            Enable RSS.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.StartStopTransmit">
            <summary>
            Enable Start / Stop Transmit.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.TelePenOldStyle">
            <summary>
            Enable TelePen Old Style.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.UPCFar">
            <summary>
            Enable UPC far decoding mode.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.SymbologyFlags.Code128Far">
            <summary>
            Enable Code128 far decoding mode.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly">
            <summary>
            The DecodeAssembly is the entry point for the DecodeAssembly.  This class exposes all decode functionality.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.Device">
            <summary>
            Exposes the Device class.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.Sound">
            <summary>
            Exposes the Sound Class.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.Dispose">
            <summary>
            Releases all of the DecodeAssemblies resources.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.OnDecodeEvent(HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs)">
            <summary>
            Event method used to raise the Decode event by invoking the delegate
            </summary>
            <param name="e">DecodeEventArgs class</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.OnMultiDecodeEvent(HandHeldProducts.Embedded.Decoding.DecodeAssembly.MultiDecodeEventArgs)">
            <summary>
            Event method used to raise the MultiDecode event by invoking the delegate
            </summary>
            <param name="e">DecodeEventArgs class</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.Connect">
            <summary>
            Connect to the Decoder engine
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.Disconnect">
            <summary>
            Disconnect from the Decoder engine
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CancelScanBarcode">
            <summary>
            Cancels the current asynchronous decode operation.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CancelMultiDecode">
            <summary>
            Cancels the current ScanMultipleBarcodes operation.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.GetDecodeCenteringWindow(HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetupTypes,System.Boolean@,HandHeldProducts.Embedded.Decoding.DecodeAssembly.CenteringWindow)">
            <summary>
            Gets the decode centering window configuration.
            </summary>
            <param name="SetupType">Specifies the type of setup to retrieve.</param>
            <param name="Enabled">Specifies if centering is enabled or disabled.</param>
            <param name="Rectangle">Specifies the Centering window / area.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.GetExposureSettings(HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings)">
            <summary>
            Gets the exposure setting.
            </summary>
            <param name="ExposureSetting"></param>
            <returns></returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.GetOcr(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRFonts@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Gets the current OCR decoding configuration.
            </summary>
            <param name="OcrFont">Determines which OCR fonts are used for decoding.</param>
            <param name="Pattern">A string that represents one or more patterns
            for the OCR decode. The following characters are allowed:
            A-Z: capital letters are matched as is.
            d: a digit from 0 to 9.
            a: alphanumeric character.
            l: alphabetic letter.
            g: any character specified in groupG.
            h: any character specified in groupH.</param>
            <param name="GroupG">A string that represents a list of characters that
            can be substituted for the lower case 'g' in the template strings.</param>
            <param name="GroupH">A string that represents a list of characters that
            can be substituted for the lower case 'h' in the template strings.</param>
            <param name="CheckChar">A null-terminated string that represents a check
            character position in the template strings.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanBarcode">
            <summary>
            Initiate an Asynchronous Decode Operation.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanMultipleBarcodes(System.Int32,System.Int32)">
            <summary>
            Initiate a Multiple Decode Operation.
            </summary>
            <param name="scanTimeout">The maximum time to perform the operation.</param>
            <param name="vKey">The key used to call the ScanMultipleBarcodes procedure.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetDecodeCenteringWindow(HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetupTypes,System.Boolean,HandHeldProducts.Embedded.Decoding.DecodeAssembly.CenteringWindow)">
            <summary>
            Sets the decode centering window configuration.
            </summary>
            <param name="SetupType">The type to configure, default or current.</param>
            <param name="Enable">Used to enable or disable centering.</param>
            <param name="Rectangle">The centering window / area to configure.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetExposureSettings(HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings,System.Int32)">
            <summary>
            Sets the desired exposure settings.
            </summary>
            <param name="ExposureSetting">The exposure setting to configure.</param>
            <param name="Value">The value to set.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetOcr(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRFonts,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the current OCR decoding configuration.
            </summary>
            <param name="OcrFont">Determines which OCR fonts are used for decoding.</param>
            <param name="Pattern">A string that represents one or more patterns
            for the OCR decode. The following characters are allowed:
            A-Z: capital letters are matched as is.
            d: a digit from 0 to 9.
            a: alphanumeric character.
            l: alphabetic letter.
            g: any character specified in groupG.
            h: any character specified in groupH.</param>
            <param name="GroupG">A string that represents a list of characters that
            can be substituted for the lower case 'g' in the template strings.</param>
            <param name="GroupH">A string that represents a list of characters that
            can be substituted for the lower case 'h' in the template strings.</param>
            <param name="CheckChar">A null-terminated string that represents a check
            character position in the template strings.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetOcrTemplates(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCRTemplates)">
            <summary>
            Set OCR Templates
            </summary>
            <param name="OcrTemplates">One of OCRTemplates</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetOcrUserTemplate(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.OCREnableModes,System.Byte[])">
            <summary>
            Set OCR User Template
            </summary>
            <param name="OcrMode">One of OCREnableModes</param>
            <param name="Template">Byte array (see OPH manual.pdf</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ConfigureFromExm(HandHeldProducts.Embedded.Decoding.DecodeAssembly@,System.String,HandHeldProducts.Embedded.Decoding.ExmDecodeSection)">
            <summary>
            Configures the decode settings from an EXM file.
            </summary>
            <param name="oDecodeAssembly">Instance of the decode assembly.</param>
            <param name="ExmFile">Path to the exm file.</param>
            <param name="ExmSection">The section of the EXM file to apply.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.EnableSymbology(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies,System.Boolean)">
            <summary>
            Enables or disables a specified symbology.
            </summary>
            <param name="Symbology">Symbology to perform the operation on.</param>
            <param name="State">State of the symbology.  True to enable, false to disable.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetSymbologyDefaults(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies)">
            <summary>
            Sets the default settings for a specific symbology.
            </summary>
            <param name="Symbology">Specified symbology.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IsSymbologyEnabled(HandHeldProducts.Embedded.Decoding.SymbologyConfigurator.Symbologies)">
            <summary>
            Determines if a specific symbology enum is enabled.
            </summary>
            <param name="Symbology">The Symbology to check.</param>
            <returns>True if enabled, false is disabled.</returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.OnIqImageEvent(HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CancelCaptureIqImage">
            <summary>
            Cancels the current asynchronous IQ Image operation.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CaptureIqImage(HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageTypes,HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors)">
            <summary>
            Starts an asynchronous IQ Image Operation.
            </summary>
            <param name="IqImageType">The type of capture to execute.</param>
            <param name="IqImageDescriptors">Defined IQ settings.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.GetLastImageSize(System.Int16@,System.Int16@,System.Int32@)">
            <summary>
            Returns the dimensions of the last aquired image.
            </summary>
            <param name="Width">Returned width of the image.</param>
            <param name="Height">Returned Height of the image.</param>
            <param name="Size">Returned size of the image.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SaveLastImage(HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageFileFormats)">
            <summary>
            Saves the last decode image to an image file.
            </summary>
            <param name="ImageFileFormat">The format to save the image.</param>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ApiRevision">
            <summary>
            Returns The Decoder API Revision.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecoderRevision">
            <summary>
            Returns The Decoder Library Revision.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanDriverRevision">
            <summary>
            Returns The Scan Driver Revision
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeAttemptLimit">
            <summary>
            Get/Set 
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeMode">
            <summary>
            Get/Set The Decode Mode.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.LinearRange">
            <summary>
            Get/Set The Linear Range when ALD Mode is Enabled.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.PrintWeight">
            <summary>
            Get/Set The Quality of the Printed Barcode (1 - Light, 7 - Dark).
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SearchTimeLimit">
            <summary>
            Get/Set The Maximum Time (ms) Allowed to Search for a Symbology in the Image.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.VideoReverse">
            <summary>
            Get/Set Video Mode.  Allows for a White Barcode on a Black Background to be Decoded.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanningLightsMode">
            <summary>
            Get/Set the Scanning Lights mode of the device.  This property is only activated during the scanning process.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureMode">
            <summary>
            Get/Set The Current Exposure Mode.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.LastDecodeTime">
            <summary>
            Returns The Amount of Time (ms) Taken for the Last Decode Operation.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.MaxMessageChars">
            <summary>
            Returns The Maximum Number of Characters that can be Returned by the Scan Engine.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanInProgress">
            <summary>
            Determines if a Scan Operation is Currently in Progress.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanTimeout">
            <summary>
            Get/Set The Maximum Time (ms) Allowed for a Decode Attempt During a Single Operation.
            </summary>
        </member>
        <member name="E:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEvent">
            <summary>
            Public instance of the Decode Event.
            </summary>
        </member>
        <member name="E:HandHeldProducts.Embedded.Decoding.DecodeAssembly.MultiDecodeEvent">
            <summary>
            Public instance of the DecMultiDecodeode Event.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageRawData">
            <summary>
            Returns The Raw IQ Image Data 
            </summary>
        </member>
        <member name="E:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageEvent">
            <summary>
            Public instance of the IQ Image Event.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanningLightsModes">
            <summary>
            Scanning light modes values.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanningLightsModes.None">
            <summary>
            Disables both the aimer and illumination during scanning.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanningLightsModes.AimerOnly">
            <summary>
            Enables only the aimer during scanning.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanningLightsModes.IlluminationOnly">
            <summary>
            Enables only illuminatino during scanning.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanningLightsModes.AimerAndIllumination">
            <summary>
            Enables alternating aimer and illumination during scanning.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ScanningLightsModes.Concurrent">
            <summary>
            Enables solid aimer and illumination during scanning.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeModes">
            <summary>
            Decode Operation Modes.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeModes.Standard">
            <summary>
            Standard Mode.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeModes.QuickOmni">
            <summary>
            Quick Omni Mode.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeModes.LinearPriority">
            <summary>
            Linear Priority Mode.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.OcrFormats">
            <summary>
            OCR Formats.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.OcrFormats.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.OcrFormats.A">
            <summary>
            OCR_A Format.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.OcrFormats.B">
            <summary>
            OCR_B Format.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.OcrFormats.Both">
            <summary>
            Both A and B Format.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureModes">
            <summary>
            Exposure Modes.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureModes.Fixed">
            <summary>
            Fixed Exposure.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureModes.OnChip">
            <summary>
            On Chip Exposure.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureModes.HHP">
            <summary>
            Honeywell Exposure.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings">
            <summary>
            Exposure Settings.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.ExposureMethod">
            <summary>
            Exposure Method.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.TargetValue">
            <summary>
            Target Value.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.TargetPercentile">
            <summary>
            Target Percentile.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.TargetAcceptGap">
            <summary>
            Target Accept Gap.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.MaximumExposure">
            <summary>
            Maximum Exposure.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.MaximumGain">
            <summary>
            Minimum Gain.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.ConformImage">
            <summary>
            Conform Image.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.ConformAttempts">
            <summary>
            Conform Attemps.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.FixedExposure">
            <summary>
            Fixed Exposure.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.FixedGain">
            <summary>
            Fixed Gain.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ExposureSettings.FixedFrameRate">
            <summary>
            Fixed Frame Rate.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes">
            <summary>
            Possible Return Codes from PInvoke Decoder.dll Function Calls
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.Initialize">
            <summary>
            Initialize state.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.Success">
            <summary>
            Successful operation.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.BadRegion">
            <summary>
            Bad Region error.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.DriverError">
            <summary>
            Driver error.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.EngineBusy">
            <summary>
            Scan Engine is busy.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.MemoryError">
            <summary>
            Memory error.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.NoDecode">
            <summary>
            Failed decode attempt.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.NoImage">
            <summary>
            Failed Image Attempt.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.NoResponse">
            <summary>
            No Response from scan engine.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.NotConnected">
            <summary>
            Scan engine not connected.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.ParameterError">
            <summary>
            Bad Parameter.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.UnSupported">
            <summary>
            Operation not supported.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.NoTrigger">
            <summary>
            The Trigger State is false.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.BadSmartImage">
            <summary>
            Bad IQ image.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.SmartImageTooLarge">
            <summary>
            IQ image is too big.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.TooMuchInterpolation">
            <summary>
            Too Much Interpolation.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.WrongResultStruct">
            <summary>
            Bad Result Structure.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.ThreadError">
            <summary>
            Failed Threaded operation.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.ResultCodes.Cancel">
            <summary>
            Operation Canceled.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetupTypes">
            <summary>
            The Configuration Type to be Applied
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetupTypes.Default">
            <summary>
            The default values.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.SetupTypes.Current">
            <summary>
            The current values.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventHandler">
            <summary>
            Decode event delegate that handles the DecodeEventArgs.
            </summary>
            <param name="sender">Sender source.</param>
            <param name="e">DecodeEventArgs class.</param>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs">
            <summary>
            The DecodeEventArgs class defines the data being passed to the decode event.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs.Exception">
            <summary>
            Returns the Exception.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs.DecodeException">
            <summary>
            Returns the DecodeException.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs.ResultCode">
            <summary>
            Returns the Result code.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs.Message">
            <summary>
            Returns the Message.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs.CodeId">
            <summary>
            Returns the Code ID.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs.AimId">
            <summary>
            Returns the Aim ID.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs.AimModifier">
            <summary>
            Returns the Aim Modifier.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs.Length">
            <summary>
            Returns the Length.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.DecodeEventArgs.RawData">
            <summary>
            Returns the raw decoded data.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.MultiDecodeEventHandler">
            <summary>
            MultiDecode event delegate that handles the MultiDecodeEventArgs.
            </summary>
            <param name="sender">Sender source.</param>
            <param name="e">MultiDecodeEventArgs class.</param>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.MultiDecodeEventArgs">
            <summary>
            The MultiDecodeEventArgs class defines the data being passed to the Multidecode event.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CenteringWindow">
            <summary>
            The CenteringWindow class defines the Centering Window Rectagle based off of the scan engine.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CenteringWindow.Left">
            <summary>
            Upper Left X Coordinate of the rectangle.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CenteringWindow.Top">
            <summary>
            Upper Left Y Coordinate of the Rectangle.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CenteringWindow.Right">
            <summary>
            Lower Right X Coordinate of the Rectangle.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CenteringWindow.Bottom">
            <summary>
            Lower Right Y Coordinate of the Rectangle.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CenteringWindow.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.CenteringWindow.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Overloaded Constructor for the CenteringWindow Class.
            </summary>
            <param name="Left">Upper Left X Coordinate of the rectangle.</param>
            <param name="Top">Upper Left Y Coordinate of the Rectangle.</param>
            <param name="Right">Lower Right X Coordinate of the Rectangle.</param>
            <param name="Bottom">Lower Right Y Coordinate of the Rectangle.</param>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageFileFormats">
            <summary>
            Image File Format Options
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageFileFormats.Bmp">
            <summary>
            Bitmap Format.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageFileFormats.Gif">
            <summary>
            Graphics Interchange Format
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageFileFormats.Jpeg">
            <summary>
            Joint Photographic Experts Group Format
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageFileFormats.Png">
            <summary>
            Portable Network Graphics Format
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageFormats">
            <summary>
            IQ Image Format Options
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageFormats.Binary">
            <summary>
            Binarized Scale.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageFormats.Gray">
            <summary>
            Gray Scale.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageTypes">
            <summary>
            IQ Image Operation Types
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageTypes.BarcodeAndImage">
            <summary>
            Both Barcode and Image.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageTypes.ImageOnly">
            <summary>
            Only the Image.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageEventHandler">
            <summary>
            IQ Image Event Delegate which will pass the IqImageEventArgs.
            </summary>
            <param name="sender">Object source.</param>
            <param name="e">IqImageEventArgs class.</param>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageEventArgs">
            <summary>
            The IqImageEventArgs class defines the data that is being passed from the IqImage Event.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageEventArgs.IqImage">
            <summary>
            Returns the IQ Image Data.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors">
            <summary>
            The IqImageDescriptors class defines the attributes of the IQ Image Descriptors.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.AspectRatio">
            <summary>
            IQ Image Aspect Ratio.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.OffsetX">
            <summary>
            IQ Image X Offset.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.OffsetY">
            <summary>
            IQ Image Y Offset
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.Width">
            <summary>
            IQ Image Width.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.Height">
            <summary>
            IQ Image Height.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.Resolution">
            <summary>
            IQ Image Resolution.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.Format">
            <summary>
            IQ Image Format.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.Reserved">
            <summary>
            IQ Image Reserved space.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Overloaded IqImageDescriptors Constructor.
            </summary>
            <param name="AspectRatio">Aspect Ratio Value.</param>
            <param name="OffsetX">X Offset Value.</param>
            <param name="OffsetY">Y Offset Value.</param>
            <param name="Width">Width Value.</param>
            <param name="Height">Height Value.</param>
            <param name="Resolution">Resolution Value.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageDescriptors.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HandHeldProducts.Embedded.Decoding.DecodeAssembly.IqImageFormats)">
            <summary>
            Overloaded IqImageDescriptors Constructor.
            </summary>
            <param name="AspectRatio">Aspect Ratio Value.</param>
            <param name="OffsetX">X Offset Value.</param>
            <param name="OffsetY">Y Offset Value.</param>
            <param name="Width">Width Value.</param>
            <param name="Height">Height Value.</param>
            <param name="Resolution">Resolution Value.</param>
            <param name="ImageFormat">IQ Image Format Type.</param>
        </member>
        <member name="T:HandHeldProducts.Embedded.Hardware.Imager">
            <summary>
            The Imager class exposes the properties of the imager on the device.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Hardware.Imager.BitsPerPixel">
            <summary>
            Returns the Bits Per Pixel resolution of the Imager.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Hardware.Imager.Columns">
            <summary>
            Returns the Columns of the Imager.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Hardware.Imager.EngineId">
            <summary>
            Returns the ID of the Scan Engine. 
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Hardware.Imager.EngineType">
            <summary>
            Returns the type of Scan engine. 
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Hardware.Imager.Rotation">
            <summary>
            Returns the rotation of the imager.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Hardware.Imager.Rows">
            <summary>
            Returns the rows of the imager.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Hardware.Imager.EngineIds">
            <summary>
            Device Engine IDs
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.Unknown">
            <summary>
            Engine is Unknown.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.None">
            <summary>
            No engine available.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.Imager4200">
            <summary>
            Honeywell 4200 Imager.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.LaserSe1200">
            <summary>
            Symbol SE 1200 laser.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.LaserSe1223">
            <summary>
            Symbol SE 1223 laser.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.ImagerIt4000">
            <summary>
            Honeywell 4000 Imager.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.ImagerIt4100">
            <summary>
            Honeywell 4100 Imager.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.ImagerIt4300">
            <summary>
            Honeywell 4300 Imager.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.ImagerIt5100">
            <summary>
            Honeywell 5100 Imager.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.ImagerIt5300">
            <summary>
            Honeywell 5300 Imager.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.ImagerIt5000Vga">
            <summary>
            Honeywell 5000 VGA Imager.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.ImagerIt5000VgaPsoc">
            <summary>
            Honeywell 5000 VGA/PSOC Imager.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.ImagerN5603">
            <summary>
            Honeywell 5603 Imager.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineIds.ImagerN5600">
            <summary>
            Honeywell 5600 Imager.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Hardware.Imager.EngineTypes">
            <summary>
            Device Engine Types
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineTypes.Unknown">
            <summary>
            Engine is unknown.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineTypes.None">
            <summary>
            No engine available.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineTypes.Imager">
            <summary>
            Engine is a imager.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.EngineTypes.Laser">
            <summary>
            Engine is a laser.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Hardware.Imager.ExposureModes">
            <summary>
            Exposure Modes.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureModes.Fixed">
            <summary>
            Fixed Exposure.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureModes.HHP">
            <summary>
            Honeywell Exposure.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings">
            <summary>
            Exposure Settings.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.ExposureMethod">
            <summary>
            Exposure Method.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.TargetValue">
            <summary>
            Target Value.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.TargetPercentile">
            <summary>
            Target Percentile.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.TargetAcceptGap">
            <summary>
            Target Accept Gap.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.MaximumExposure">
            <summary>
            Maximum Exposure.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.MaximumGain">
            <summary>
            Minimum Gain.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.ConformImage">
            <summary>
            Conform Image.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.ConformAttempts">
            <summary>
            Conform Attemps.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.FixedExposure">
            <summary>
            Fixed Exposure.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.FixedGain">
            <summary>
            Fixed Gain.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Hardware.Imager.ExposureSettings.FixedFrameRate">
            <summary>
            Fixed Frame Rate.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.HotKey">
            <summary>
            Provides the ability to register a key as a hot key and then receive notification
            when that key is pressed.  The Key Down and Key Up states are detected.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.HotKey.#ctor">
            <summary>
            HotKey constructor.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.HotKey.Dispose">
            <summary>
            Explicitly free, release or reset unmanaged resources.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.HotKey.Finalize">
            <summary>
            HotKey destructor.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.HotKey.Dispose(System.Boolean)">
            <summary>
            Explicitly free, release or reset unmanaged resources (overloaded).
            </summary>
            <param name="Disposing">Explicitly called from managed code?</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.HotKey.OnHotKeyEvent(HandHeldProducts.Embedded.Utility.HotKey.HotKeyEventArgs)">
            <summary>
            Raises the Hot Key Event to the registered event handler.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.HotKey.RegisterHotKey(System.Int32,System.Boolean)">
            <summary>
            Register or unregister the Hot Key.
            </summary>
            <param name="ScanKey">The key to act as the Hot Key.</param>
            <param name="State">Should the key be registered?</param>
        </member>
        <member name="P:HandHeldProducts.Embedded.Utility.HotKey.LastHotKeyState">
            <summary>
            Flag to track the last Hot Key State (KeyDown or KeyUp).
            </summary>
        </member>
        <member name="E:HandHeldProducts.Embedded.Utility.HotKey.HotKeyEvent">
            <summary>
            Signals a state change for the registered hot key.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.HotKey.HotKeyStates">
            <summary>
            The possible Hot Key States.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.HotKey.HotKeyStates.KeyDown">
            <summary>
            The Hot Key is down.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.HotKey.HotKeyStates.KeyUp">
            <summary>
            The Hot Key is up.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.HotKey.HotKeyEventHandler">
            <summary>
            Delegate for the Hot Key Event that will pass the HotKeyEventArgs.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.HotKey.HotKeyEventArgs">
            <summary>
            Class that defines the data that will be passed when the Hot Key Event is raised.
            </summary>
        </member>
        <member name="P:HandHeldProducts.Embedded.Utility.HotKey.HotKeyEventArgs.HotKeyState">
            <summary>
            The state of the Hot Key.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI">
            <summary>
            The WinAPI class exposes Windows API's used by controls and made available to other assemblies.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.NET_CLASSNAME">
            <summary>
            Classname for standard .NET object.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysEnableWindow(System.IntPtr,System.Boolean)">
            <summary>
            This function enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive
            input such as mouse clicks and key presses. When input is enabled, the window receives all input. 
            </summary>
            <param name="hWindowHandle">[in] Handle to the window to be enabled or disabled. </param>
            <param name="bEnable">[in] Boolean that specifies whether to enable or disable the window. If this parameter is TRUE, the window is enabled. If the
            parameter is FALSE, the window is disabled. </param>
            <returns>Nonzero indicates that the window was previously disabled. Zero indicates that the window was not previously disabled. To get extended 
            error information, call GetLastError. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysFindWindow(System.String,System.String)">
            <summary>
            This function retrieves the handle to the top-level window whose class name and window name match the specified strings. This function does not
            search child windows. 
            </summary>
            <param name="ClassName">[in] Long pointer to a null-terminated string that specifies the class name or is an atom that identifies the class-name
            string. </param>
            <param name="WindowName">[in] Long pointer to a null-terminated string that specifies the window name (the window's title). If this parameter is
            NULL, all window names match. </param>
            <returns>A handle to the window that has the specified class name and window name indicates success. NULL indicates failure. To get extended
            error information, call GetLastError. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysGetAsyncKeyState(System.Int32)">
            <summary>
            This function determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call
            to GetAsyncKeyState.
            </summary>
            <param name="VirtualKeyCode">[in] Specifies one of 256 possible virtual-key codes. </param>
            <returns>If the function succeeds, the return value specifies whether the key was pressed since the last call to GetAsyncKeyState, and whether
            the key is currently up or down. If the most significant bit is set, the key is down. The least significant bit is not valid in Windows 
            Embedded CE, and should be ignored. GetAsyncKeyState returns the current key state even if a window in another thread or process currently has
            the keyboard focus.</returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysGetClassName(System.IntPtr,System.Char[],System.Int32)">
            <summary>
            The GetClassName function retrieves the name of the class to which the specified window belongs. 
            </summary>
            <param name="hHandle">[in] Handle to the window and, indirectly, the class to which the window belongs. </param>
            <param name="ClassName">[out] Pointer to the buffer that is to receive the class name string. </param>
            <param name="ClassNameLength">[in] Specifies the length, in TCHAR, of the buffer pointed to by the lpClassName parameter. The class name string is truncated if
            it is longer than the buffer and is always null-terminated. </param>
            <returns></returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysGetForegroundWindow">
            <summary>
            This function returns the handle to the foreground window; the window with which the user is currently working. 
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysGetKeyState(System.Int32)">
            <summary>
            This function retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled on or off; alternating
            each time the key is pressed. 
            </summary>
            <param name="VirtualKey">[in] Specifies a virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9), 
            nVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key code. </param>
            <returns>If the high-order bit is 1, the key is down; otherwise, it is up. If the low-order bit is 1, the key is toggled. 
            A key, such as the CAPS LOCK key, is toggled if it is turned on. The key is off and untoggled if the low-order bit is 0. A toggle key's indicator
            light (if any) on the keyboard will be on when the key is toggled, and off when the key is untoggled. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysGetLastError">
            <summary>
            Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis. Multiple threads do not overwrite 
            each other's last-error code.
            </summary>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysGetWindow(System.IntPtr,HandHeldProducts.Embedded.Utility.WinAPI.GetWindowType)">
            <summary>
            The GetWindow function retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window. 
            </summary>
            <param name="hHandle">[in] Handle to a window. The window handle retrieved is relative to this window, based on the value of the uCmd parameter. </param>
            <param name="val">[in] Specifies the relationship between the specified window and the window whose handle is to be retrieved. </param>
            <returns>If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window,
            the return value is NULL. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysGetWindowText(System.IntPtr,System.Char[],System.Int32)">
            <summary>
            This function copies the text of the specified window's title bar, if it has one, into a buffer.
            </summary>
            <param name="hHandle">[in] Handle to the window or control containing the text. </param>
            <param name="ReceiveBuffer">[out] Long pointer to the buffer that will receive the text.</param>
            <param name="BufferMaxCount">[in] Specifies the maximum number of characters to copy to the buffer, including the NULL character. If the text exceeds
            this limit, it is truncated. </param>
            <returns>The length, in characters, of the copied string, not including the terminating null character, indicates success. Zero indicates that
            the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid. To get extended error information,
            call GetLastError. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysKeyboardEvent(System.Byte,System.Byte,HandHeldProducts.Embedded.Utility.WinAPI.KeyFlags,System.Int32)">
            <summary>
            This function synthesizes a keystroke. The system can use such a synthesized keystroke to generate a WM_KEYUP or WM_KEYDOWN message. 
            </summary>
            <param name="VirtualKeyCode">[in] Specifies a virtual-key code. The code must be a value in the range 1 to 254.</param>
            <param name="ScanCode">[in] Specifies a hardware scan code for the key.</param>
            <param name="KeyFlag">[in] Specifies an additional 32-bit value associated with the keystroke. </param>
            <param name="dwExtraInfo">[in] Specifies an additional 32-bit value associated with the keystroke.</param>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysRegisterHotKey(System.IntPtr,HandHeldProducts.Embedded.Utility.WinAPI.HotkeyID,HandHeldProducts.Embedded.Utility.WinAPI.HotkeyModify,System.Int32)">
            <summary>
            This function defines a system-wide hot key. 
            </summary>
            <param name="hHandle">[in] Handle to the window that will receive WM_HOTKEY messages generated by the hot key. The value of this parameter should not be NULL. </param>
            <param name="id">[in] Identifier of the hot key. No other hot key in the calling thread should have the same identifier. An application must specify a
            value in the range 0x0000 through 0xBFFF. A shared dynamic-link library (DLL) must specify a value in the range 0xC000 through 0xFFFF. </param>
            <param name="fsModifiers">[in] Specifies keys that must be pressed in combination with the key specified by the nVirtKey parameter in order to generate a WM_HOTKEY message. </param>
            <param name="VirtualKeyCode">[in] Specifies the virtual-key code of the hot key. </param>
            <returns>Nonzero indicates success. Zero indicates failure. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysSetForegroundWindow(System.IntPtr)">
            <summary>
            The SetForegroundWindow function puts the thread that created the specified window into the foreground and activates the window. Keyboard input
            is directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that 
            created the foreground window than it does to other threads. 
            </summary>
            <param name="hHandle">[in] Handle to the window that should be activated and brought to the foreground. </param>
            <returns>If the window was brought to the foreground, the return value is nonzero. If the window was not brought to the foreground, the return
            value is zero.</returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysShowWindow(System.IntPtr,HandHeldProducts.Embedded.Utility.WinAPI.WindowType)">
            <summary>
            This function sets the specified window's show state.
            </summary>
            <param name="hHandle">[in] Handle to the window. </param>
            <param name="type">[in] Specifies how the window is to be shown. The first time ShowWindow is called, the value should be the value obtained by the 
            WinMain function in its nCmdShow parameter.</param>
            <returns>Nonzero indicates that the window was previously visible. Zero indicates that the window was previously hidden. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysSystemParametersInfoW(HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery,System.Int32,System.Char[],HandHeldProducts.Embedded.Utility.WinAPI.WinInit)">
            <summary>
            This function queries or sets system-wide parameters, and updates the user profile during the process.
            </summary>
            <param name="Action">[in] Specifies the system-wide parameter to query or set.</param>
            <param name="uiParam">[in] Depends on the system parameter being queried or set. For more information about system-wide parameters, see the uiAction parameter.
            If not otherwise indicated, you must specify zero for this parameter. </param>
            <param name="pvParam">[out] Depends on the system parameter being queried or set. For more information about system-wide parameters, see the uiAction 
            parameter. If not otherwise indicated, you must specify NULL for this parameter. </param>
            <param name="winInit">[in] Boolean that, if a system parameter is being set, specifies whether the user profile is to be updated, and if so, whether the
            WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change. </param>
            <returns>Nonzero indicates success. Zero indicates failure. This function will return ERROR_RESOURCE_DISABLED if you attempt to set the values
            SPI_SETBATTERYIDLETIMEOUT, SPI_SETEXTERNALIDLETIMEOUT, or SPI_SETWAKEUPIDLETIMEOUT when GWES suspend management is disabled. To get extended error 
            information, call GetLastError. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysUnregisterHotKey(System.IntPtr,HandHeldProducts.Embedded.Utility.WinAPI.HotkeyID)">
            <summary>
            This function frees a hot key previously registered by the calling thread.
            </summary>
            <param name="hHandle">[in] Handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window. </param>
            <param name="id">[in] Identifier of the hot key to be freed. </param>
            <returns>Nonzero indicates success. Zero indicates failure. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysCreateFileW(System.String,HandHeldProducts.Embedded.Utility.WinAPI.AccessType,HandHeldProducts.Embedded.Utility.WinAPI.ShareMode,System.IntPtr,HandHeldProducts.Embedded.Utility.WinAPI.CreateType,HandHeldProducts.Embedded.Utility.WinAPI.FileAttributes,System.IntPtr)">
            <summary>
            This function creates, opens, or truncates a file, COM port, device, service, or console. 
            </summary>
            <param name="lpFileName">[in] Pointer to a null-terminated string that specifies the name of the object, such as file, COM port, disk device, or console,
            to create or open. </param>
            <param name="dwDesiredAccess">[in] Type of access to the object. An application can obtain read-only access, write-only access, read/write access, or 
            device query access. </param>
            <param name="dwShareMode">[in] Share mode for object. If dwShareMode is zero, the object cannot be shared. Subsequent open operations on the object will
            fail, until the handle is closed.</param>
            <param name="lpSecurityAttributes">[in] Ignored; set to NULL.</param>
            <param name="dwCreationDisposition">[in] Action to take on files that exist, and which action to take when files do not exist. </param>
            <param name="dwFlagsAndAttributes">[in] File attributes and flags for the file. </param>
            <param name="hTemplateFile">[in] Ignored; as a result, CreateFile does not copy the extended attributes to the new file. </param>
            <returns>An open handle to the specified file indicates success. If the specified file exists before the function call and dwCreationDisposition is 
            CREATE_ALWAYS or OPEN_ALWAYS, a call to GetLastError returns ERROR_ALREADY_EXISTS, even though the function has succeeded. If the file does not exist 
            before the call, GetLastError returns zero. INVALID_HANDLE_VALUE indicates failure. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysEventModify(System.IntPtr,System.Int32)">
            <summary>
            Modifies the specified event object.
            </summary>
            <param name="hEventHandle">[in] A handle to the event object.</param>
            <param name="state">State to change too. 2 = Reset, 3 = Set</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.SetEvent(System.IntPtr)">
            <summary>
            Sets the specified event object to the signaled state.
            </summary>
            <param name="hEventHandle">[in] A handle to the event object.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.ResetEvent(System.IntPtr)">
            <summary>
            Sets the specified event object to the nonsignaled state.
            </summary>
            <param name="hEventHandle">[in] A handle to the event object.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysCreateEventW(System.IntPtr,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a named or an unnamed event object.
            </summary>
            <param name="lpEventAttributes">[in] Ignored, must be NULL</param>
            <param name="bManualReset">[in] Boolean that specifies whether a manual-reset or auto-reset event object is created.</param>
            <param name="bInitialState">[in] Boolean that specifies the initial state of the event object. If TRUE, the initial state is signaled; otherwise,
            it is nonsignaled. </param>
            <param name="lpName">[in] Pointer to a null-terminated string that specifies the name of the event object. </param>
            <returns>A handle to the event object indicates success. If the named event object existed before the function call, the function returns
            a handle to the existing object and GetLastError returns ERROR_ALREADY_EXISTS. NULL indicates failure. To get extended error information, 
            call GetLastError. </returns>
        </member>
        <member name="M:HandHeldProducts.Embedded.Utility.WinAPI.sysCloseHandle(System.IntPtr)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="hObjectHandle">[in] Handle to an open object</param>
            <returns>Nonzero indicates success. Zero indicates failure.  To get extended error information, call GetLastError</returns>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.GetWindowType">
            <summary>
            Enumeration of values used with sysGetWindow method.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.GetWindowType.First">
            <summary>
            The retrieved handle identifies the window of the same type that is highest in the Z order. 
            If the specified window is a topmost window, the handle identifies the topmost window that is highest in the Z order.
            If the specified window is a top-level window, the handle identifies the top-level window that is highest in the Z order.
            If the specified window is a child window, the handle identifies the sibling window that is highest in the Z order.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.GetWindowType.Last">
            <summary>
            The retrieved handle identifies the window of the same type that is lowest in the Z order. If the specified window is
            a topmost window, the handle identifies the topmost window that is lowest in the Z order. If the specified window is a
            top-level window, the handle identifies the top-level window that is lowest in the Z order. If the specified window is
            a child window, the handle identifies the sibling window that is lowest in the Z order.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.GetWindowType.Next">
            <summary>
            The retrieved handle identifies the window below the specified window in the Z order. If the specified window is a topmost
            window, the handle identifies the topmost window below the specified window. If the specified window is a top-level window,
            the handle identifies the top-level window below the specified window. If the specified window is a child window, the handle 
            identifies the sibling window below the specified window.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.GetWindowType.Previous">
            <summary>
            The retrieved handle identifies the window above the specified window in the Z order. If the specified window is a topmost
            window, the handle identifies the topmost window above the specified window. If the specified window is a top-level window,
            the handle identifies the top-level window above the specified window. If the specified window is a child window, the handle
            identifies the sibling window above the specified window.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.GetWindowType.Owner">
            <summary>
            The retrieved handle identifies the specified window's owner window, if any.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.GetWindowType.Child">
            <summary>
            The retrieved handle identifies the child window at the top of the Z order, if the specified window is a parent window; otherwise,
            the retrieved handle is NULL. The function examines only child windows of the specified window. It does not examine descendant windows.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.KeyFlags">
            <summary>
            Enumeration of values used with sysKeyBoardEvent method.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.KeyFlags.ExtendedKey">
            <summary>
            If specified, the scan code was preceded by a prefix byte having the value 0xE0 (224).
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.KeyFlags.KeyUp">
            <summary>
            If specified, the key is being released. If not specified, the key is being depressed.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.WindowType">
            <summary>
            Enumeration of values used with sysShowWindow method.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.WindowType.Hide">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.WindowType.ShowNormal">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to
            its original size and position. An application should specify this flag when displaying the window for
            the first time.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.WindowType.Show">
            <summary>
            Activates the window and displays it in its current size and position. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.WindowType.ShowNA">
            <summary>
            Displays the window in its current size and position. This value is similar to SW_SHOW, except the window is not activated.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery">
            <summary>
            Enumeration of values used with sysSystemParametersInfoW method.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetAccessTimeout">
            <summary>
            Retrieves information about the time-out period associated with the accessibility features. 
            The pvParam parameter must point to an ACCESSTIMEOUT structure that receives the information. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetFontSmoothing">
            <summary>
            Determines whether the font smoothing feature is enabled. This feature uses font antialiasing to make font
            curves appear smoother by painting pixels at different gray levels. The pvParam parameter must point to a 
            BOOL variable that receives TRUE if the feature is enabled, or FALSE if it is not.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetHighContrast">
            <summary>
            Retrieves information about the HighContrast accessibility feature. The pvParam parameter must point to a 
            HIGHCONTRAST structure that receives the information. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetMouse">
            <summary>
            Retrieves the two mouse threshold values and the mouse acceleration. The pvParam parameter must point to an
            array of three integers that receives these values.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetMouseKeys">
            <summary>
            Retrieves information about the MouseKeys accessibility feature. The pvParam parameter must point to a 
            MOUSEKEYS structure that receives the information. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetScreenSaveTimeout">
            <summary>
            Retrieves the screen saver time-out value, in seconds. The pvParam parameter must point to an integer variable
            that receives the value.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetShowSounds">
            <summary>
            Determines whether the Show Sounds accessibility flag is on or off. If it is on, the user requires an application
            to present information visually in situations where it would otherwise present the information only in audible form.
            The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is on, or FALSE if it is off. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetSoundsEntry">
            <summary>
            Retrieves information about the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY
            structure that receives the information.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetStickyKeys">
            <summary>
            Retrieves information about the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS
            structure that receives the information.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetToggleKeys">
            <summary>
            Retrieves information about the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS
            structure that receives the information. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetWheelScrollLines">
            <summary>
            Retrieves the number of lines to scroll when the vertical mouse wheel is moved. The pvParam parameter must point to a
            UINT variable that receives the number of lines. The default value is 3. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.GetWorkArea">
            <summary>
            Retrieves the size of the work area on the primary display monitor. The work area is the portion of the screen not 
            obscured by the system taskbar or by application desktop toolbars. The pvParam parameter must point to a RECT structure
            that receives the coordinates of the work area, expressed in virtual screen coordinates. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetAccessTimeout">
            <summary>
            Sets the time-out period associated with the accessibility features. The pvParam parameter must point to an ACCESSTIMEOUT
            structure that contains the new parameters. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetFontSmoothing">
            <summary>
            Enables or disables the font smoothing feature, which uses font antialiasing to make font curves appear smoother by painting
            pixels at different gray levels. To enable the feature, set the uiParam parameter to TRUE. To disable the feature, set uiParam to FALSE.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetHighContrast">
            <summary>
            Sets the parameters of the HighContrast accessibility feature. The pvParam parameter must point to a HIGHCONTRAST structure 
            that contains the new parameters. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetMouse">
            <summary>
            Sets the two mouse threshold values and the mouse acceleration. The pvParam parameter must point to an array of three integers 
            that specifies these values.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetMouseKeys">
            <summary>
            Sets the parameters of the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS structure that contains
            the new parameters.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetScreenSaveTimeout">
            <summary>
            Sets the screen saver time-out value to the value of the uiParam parameter. This value is the amount of time, in seconds, that the 
            system must be idle before the screen saver activates.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetShowSounds">
            <summary>
            Turns the ShowSounds accessibility feature on or off. The uiParam parameter specifies TRUE for on, or FALSE for off.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetSoundsEntry">
            <summary>
            Sets the parameters of the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY structure that contains
            the new parameters.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetStickyKeys">
            <summary>
            Sets the parameters of the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS structure that contains
            the new parameters.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetToggleKey">
            <summary>
            Sets the parameters of the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS structure that contains 
            the new parameters.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetWheelScrollLine">
            <summary>
            Sets the number of lines to scroll when the vertical mouse wheel is moved. The number of lines is set from the uiParam parameter. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.SystemQuery.SetWorkArea">
            <summary>
            Sets the size of the work area. The work area is the portion of the screen not obscured by the system taskbar or by application 
            desktop toolbars. The pvParam parameter is a pointer to a RECT structure that specifies the new work area rectangle, expressed 
            in virtual screen coordinates. In a system with multiple display monitors, the function sets the work area of the monitor that 
            contains the specified rectangle.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.WinInit">
            <summary>
            Enumeration of values used with sysSystemParametersInfoW method.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.WinInit.UpdateIniFile">
            <summary>
            Writes the new system-wide parameter setting to the user profile.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.WinInit.SendChange">
            <summary>
            Broadcasts the WM_SETTINGCHANGE message after updating the user profile.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.AccessType">
            <summary>
            Enumeration of TypeAccess identifiers used with sysCreateFileW method. 
            </summary>
            <remarks>
            Generic, specifies device query access to the object. An application can query device attributes without accessing the device.
            GenericRead, specifies read access to the object. Data can be read from the file and the file pointer can be moved. Combine with Write for 
            read/write access.
            GenericWrite, specifies write access to the object. Data can be written to the file and the file pointer can be moved. Combine with Read 
            for read/write access.
            </remarks>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.AccessType.Generic">
            <summary>
            Generic access.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.AccessType.GenericRead">
            <summary>
            Access for reading.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.AccessType.GenericWrite">
            <summary>
            Access for writing.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.ShareMode">
            <summary>
            Enumeration of ShareMode identifiers used with sysCreateFileW method. 
            </summary>
            <remarks>
            Read indicates that subsequent open operations on the object will succeed only if read access is requested.
            Write Indicates that subsequent open operations on the object will succeed only if write access is requested.
            </remarks>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.ShareMode.Read">
            <summary>
            Enables subsequent open operations on an object to request read access. Otherwise, other processes cannot open the object if they request 
            read access. If this flag is not specified, but the object has been opened for read access, the function fails.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.ShareMode.Write">
            <summary>
            Enables subsequent open operations on an object to request write access. Otherwise, other processes cannot open the object if they request
            write access. If this flag is not specified, but the object has been opened for write access or has a file mapping with write access, the 
            function fails.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.CreateType">
             <summary>
             Enumeration of CreateType identifiers used with sysCreateFileW method. 
             </summary>
             <remarks>
             CreateNew, creates a new file. The function fails if the specified file already exists.
             CreateAlways, creates a new file. If the file exists, the function overwrites the file and clears the existing attributes.
             OpenExisting, Opens the file. The function fails if the file does not exist. For an explanation why you should use the 
             OpenExisting, flag if you are using the CreateFileW function for devices.
             OpenAlways, opens the file, if it exists. If the file does not exist, the function creates the file as if dwCreationDisposition were CreateNew.
             TruncateExisting, Opens the file. Once opened, the file is truncated so that its size is zero bytes. The calling process must open the file with at 
             least (AccessType) GenericWrite access. The function fails if the file does not exist.
            </remarks>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.CreateType.CreateNew">
            <summary>
            Creates a new file.  The function fails if a specified file exists.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.CreateType.CreateAlways">
            <summary>
            Opens a file, always.  If a file does not exist, the function creates a file as if dwCreationDisposition is CREATE_NEW.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.CreateType.OpenExisting">
            <summary>
            Opens a file.  The function fails if the file does not exist.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.CreateType.OpenAlways">
            <summary>
            Opens a file, always.  If a file does not exist, the function creates a file as if dwCreationDisposition is CREATE_NEW.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.CreateType.TruncateExisting">
            <summary>
            Opens a file and truncates it so that its size is zero (0) bytes.  The function fails if the file does not exist. 
            The calling process must open the file with the GENERIC_WRITE access right.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.FileAttributes">
            <summary>
            Enumeration of FileAttributes identifiers used with sysCreateFileW method. 
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.FileAttributes.None">
            <summary>
            No file attributes will be set.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.FileAttributes.WriteThrough">
            <summary>
            Write operations will not go through any intermediate cache, they will go directly to disk. If FILE_FLAG_NO_BUFFERING is not also specified,
            so that system caching is in effect, then the data is written to the system cache, but is flushed to disk without delay. 
            If FILE_FLAG_NO_BUFFERING is also specified, so that system caching is not in effect, then the data is immediately flushed 
            to disk without going through the system cache. The operating system also requests a write-through the hard disk cache to persistent media. 
            However, not all hardware supports this write-through capability.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.FileAttributes.Overlapped">
            <summary>
            The file is being opened or created for asynchronous I/O. When the operation is complete, the event specified in the OVERLAPPED 
            structure is set to the signaled state. Operations that take a significant amount of time to process return ERROR_IO_PENDING. 
            If this flag is specified, the file can be used for simultaneous read and write operations. The system does not maintain the 
            file pointer, therefore you must pass the file position to the read and write functions in the OVERLAPPED structure or update 
            the file pointer. If this flag is not specified, then I/O operations are serialized, even if the calls to the read and write 
            functions specify an OVERLAPPED structure.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.FileAttributes.NoBuffering">
            <summary>
            The file is being opened with no system caching. This flag does not affect hard disk caching or memory mapped files. 
            When combined with FILE_FLAG_OVERLAPPED, the flag gives maximum asynchronous performance, because the I/O does not rely on 
            the synchronous operations of the memory manager. However, some I/O operations take more time, because data is not being 
            held in the cache.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.FileAttributes.RandomAccess">
            <summary>
            The file is to be accessed randomly. The system can use this as a hint to optimize file caching.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyModify">
            <summary>
            Enumeration of Hotkey modifiers used with sysRegisterHotKey method.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyModify.None">
            <summary>
            No key.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyModify.Alt">
            <summary>
            Either ALT key must be held down.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyModify.Control">
            <summary>
            Either CTRL key must be held down.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyModify.Shift">
            <summary>
            Either SHIFT key must be held down.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyModify.Win">
            <summary>
            Either WINDOWS key was held down. These keys are labeled with the Microsoft Windows logo. Keyboard shortcuts that 
            involve the WINDOWS key are reserved for use by the operating system.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyModify.Keyup">
            <summary>
            When a key up occurs.
            </summary>
        </member>
        <member name="T:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyID">
            <summary>
            Enumeration of HotkeyID identifiers used with sysRegisterHotKey method.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyID.Scan">
            <summary>
            Scan key was activated.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyID.ArrowUp">
            <summary>
            Up arrow key was activated.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyID.ArrowDown">
            <summary>
            Down arrow key was activated.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyID.ArrowLeft">
            <summary>
            Left arrow key was activated.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyID.ArrowRight">
            <summary>
            Right arrow key was activated.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyID.Prior">
            <summary>
            Prior arrow key was activated.
            </summary>
        </member>
        <member name="F:HandHeldProducts.Embedded.Utility.WinAPI.HotkeyID.Next">
            <summary>
            Next arrow key was activated.
            </summary>
        </member>
    </members>
</doc>
